---
layout: post
title:  "[교육용] Python 패키지 logie 에 활용법"
date:   2025-07-23 15:54:01 +0900
author: Kimyh
excerpt_separator: "<!--more-->"
tags:
    - guide
    - markdown
    - rule
---
*서비스를 운영하다 보면, 어떤 문제가 언제 발생했는지, 정상적인 흐름이 잘 동작하고 있는지 등을 파악하기 위해 로그(log) 는 필수입니다. 하지만 Python 기본 logging 모듈을 사용할 때마다 매번 formatter, handler, 파일 분리 등을 설정하는 일은 생각보다 번거롭고 반복적입니다. 그리고 개발자 마다 표시하는 로그 방식이 상이하면 코드를 파악하기 어렵습니다. 그래서 로그 설정을 단 한 줄로 간편하고, 자사의 모델러들이 통일된 형태의 로거 방식을 이용할 수 있게  패키지를 마련했습니다. logie는 실무에서 자주 사용하는 로그 설정 패턴을 패키지로 묶은 유틸성 라이브러리입니다.*
<!--more-->

## 설치 및 사용
~~log 생성 관련 함수모음 패키지.~~ *패키지는 PyPI에 등록되어 있어 다음과 같이 간편하게 설치할 수 있습니다:*

~~인스톨 명령어~~

```bash
pip install logie
```

~~사용시~~ *사용 시에는 아래와 같이 import 하여 활용합니다.*

```python
import logie
```

## `class` get_logger

로그 수준의 `INFO` 보다 높은 수준을 전부 기록하는 전체 로그파일과 `INFO` 수준만을 기록하는 `info.log`, `error` 수준만을 기록하는 `error.log` 를 생성하는 함수. 모든 생성되는 로그파일에 있어서 `INFO` 보다 낮은 수준(`DEBUG`)은 기록하지 않는다.

### Parameters
| 입력변수   | type   | default |
| ---------- | ------ | ------- |
| `log_path` | `str`  | `None`  |
| `log_name` | `str`  | `'app'` |
| `rollover` | `bool` | `True`  |

~~| 출력 type | 설명                                                         |
| --------- | ------------------------------------------------------------ |
| `logging` | `info`, `warning`, `error`, `critical` 에 대한 로그 기록을 가능하도록 하는 로그 변수 |~~

### 사용예시

```python
import logie as lo
log = lo.get_logger()
# log = lu.get_logger(
#     log_path='./log',
#     log_name='whole', 
#     rollover=True
# )

log.debug("DEBUG 메시지입니다.")
log.info("INFO 메시지입니다.")
log.warning("WARNING 메시지입니다.")
log.error("ERROR 메시지입니다.")
log.critical("CRITICAL 메시지입니다.")
```

*아래 결과는 터미널에 출력되는 내용 없이 `app.log`, `error.log`, `info.log` 파일에 맞게 각각 아래와 같은 형태로 저장되며, 날짜 시간, 에러 코드 라인 번호, 수준, 내용 순으로 기록 된다. `print` 문과 같이 터미널에 기록되는 기능은 추가 예정이다.

```
'''
작업디렉토리에 log 폴더 생성
app.log
2025-07-22 16:55:07,485 level:INFO test.py line 160 INFO 메시지입니다.
2025-07-22 16:55:07,485 level:WARNING test.py line 161 WARNING 메시지입니다.
2025-07-22 16:55:07,485 level:ERROR test.py line 162 ERROR 메시지입니다.
2025-07-22 16:55:07,485 level:CRITICAL test.py line 163 CRITICAL 메시지입니다.

error.log
2025-07-22 16:55:07,485 level:ERROR test.py line 162 ERROR 메시지입니다.

info.log
2025-07-22 16:55:07,485 level:INFO test.py line 160 INFO 메시지입니다.
'''
```
### Parameters 상세

> `log_path`  | type : `str` | default : `None`
>
> .log 파일을 생성할 경로값을 입력한다. 이때 log 의 이름은 포함하지 않는다.
>
> 기본값은 `None` 으로 되어있으며 경로를 별도 설정하지 않는 경우 자동으로 `작업디렉토리/log` 로 설정된다.


> `log_name` | type : `str` | default : `'app'`
>
> .log 파일을 생성할때 만들어지는 전체 로그파일의 이름. 설정하지 않는 경우 app.log 가 자동 생성된다.
>
> 이 이름과는 별개로 info.log, error.log 가 자동으로 저장된다.


> `rollover` | type : `bool` | default : `True`
>
> *날짜가 넘어가면 새로운 파일로 저장할 지 여부를 정하는 기능. `True` 시 1일 기준으로 파일이 생성되고 파일명 제일 뒤에 해당 년월일이 기록됨.* ~~저장된 로그파일에 대해서, 날짜가 넘어간 다음 새로운 로그 파일 생성시 이전 날짜의 로그 파일은 날짜이름을 붙이면서 동시에 별개의 파일로 만들지 여부~~
>
> ```
> # 2025년 7월 22일에 로그 생성
> # 경로는 ./log
> app.log
> error.log
> info.log
> 
> # 2025년 7월 23일에 로그 생성
> # 경로는 ./log
> app.log
> app.log.20250722  # 어제의 로그는 따로 분리됨
> error.log
> error.log.20250722
> info.log 
> info.log.20250722 # 어제의 로그는 따로 분리됨
> ```


## log_sort

*약 3개월 이상 로그를 기록할 경우, 파일 양이 많아지고 가시적으로 구분이 어려워 년과 월을 디렉션으로 구분해 주는 함수* ~~날짜가 넘어가서 기록되는 log 파일에 대해서 폴더별로 구분하여 정리하는 함수.~~ {저장한 로그경로}_history 라는 새로운 폴더가 생성되고, 내부에 년, 월로 구분되어 이전 날짜의 로그가 정리된다.

### Parameters

| 입력변수   | type  | default |
| ---------- | ----- | ------- |
| log_path | `str` | `None`  |

### 사용예시
```python
log_path = './log'
lu.log_sort(log_path)
```

### Parameters 상세

> `log_path` | type : `str` | default : `None`
>
> 저장된 .log 파일의 날짜별 log 파일이 기록된 경로. 
>
> 기본값은 `None` 으로 되어있으며 자동으로 `작업디렉토리/log` 로 설정된다.
>
> 만약 구분할 log 파일이 없어도 구분만 되지 않을 뿐 정상 작동한다.
>
> ```python
> lu.log_sort()
> ```
>
> ```python
> '''
> ./log/app.log
> ./log/app.log.20250722
> ./log/error.log
> ./log/error.log.20250722
> ./log/info.log 
> ./log/info.log.20250722
> '''
> 
> -->
> 
> '''
> ./log/app.log
> ./log/error.log
> ./log/info.log 
> 
> ./log_history/2025/07/app.log.20250722
> ./log_history/2025/07/error.log.20250722
> ./log_history/2025/07/info.log.20250722
> '''
> ```
