---
layout: post
title:  "서버 메모리 터짐 현상 관련 정보"
date:   2024-12-11 17:05:01 +0900
author: Kimyh
excerpt_separator: "<!--more-->"
tags:
    - guide
    - markdown
    - rule
---

서버 메모리 터짐 현상이 발생하였을시 조치 방법입니다.

<!--more-->

# 1. GPU 메모리 확인

가장 기본적인 원인으로, AI 학습 등을 진행하면서 GPU 메모리가 감당 할 수 없을 만큼의 연산메모리를 사용하여 발생하는 경우

```bash 
nvidia-smi
watch -n 1 nivida-smi # (1초에 한번씩 계속 보여줌)
```

~~GPU 메모리 사용을 확인 가능한 터미널 명령어를 통해 사용량을 확인하고 적절한 데이터입력 batch 등을 고려해야함~~ *`nvidia-smi`명령어 등을 이용하여 GPU 메모리를 확인하고, 메모리 사용량을 클 경우 batch 사이증 등을 조절해야 함*

# 2. CPU 메모리 확인

GPU 메모리 등에 문제가 없을 경우, 두 번째 파악해야하는 영역.

~~CPU 메모리는 대개 과한 매개 변수 생성 또는 특정 type 의 변수에 값이 과하게 축적되어 해당 변수의 메모리 자체가 서버가 감당할 수 없을 정도로 비대해지는 경우 발생함.~~ *CPU 메모리 과부하는 주로 변수의 수를 과도하게 생성하거나 하나의 변수 안에 값을 과하게 축적할때, 서버가 감당하지 못해 발생 함*

### 2-1. ~~python~~ *메모리 확인* 코드

- 모델에 CPU 메모리 사용량을 확인하는 python 코드는 아래 와 같음 ~~메모리 확인 python 코드~~

```python
import psutil

def print_memory_usage():
    memory_info = psutil.virtual_memory()
    cpu_use = memory_info.percent
    memory_avail = memory_info.available / (1024 ** 3)
    print(f'CPU Memory Usage: {cpu_use}% Used, {memory_avail:.2f} GB available')
```

### 2-2. 예시

1.  list*에* ~~와 같은 데이터를 저장가능한 변수에~~ 과하게 많은 값이 축적되는 경우

~~list 변수에 들어가는 값 또한 메모리를 사용하게 되어 무한대로 축적하는 것은 불가능함~~*아래 코드와 같이 학습이 완료된 예측값을 list로 누적하거나, 학습에 사용되는 배치값을 누적할 경우, 메모리 터짐 현상이 발생하기 때문에, 학습이 완료된 결과를 `json` 형태 등으로 하드에 저장후 불러오는 등의 해결 방법을 사용해야 함*


```python
for i in range(epohcs):
    pred_list = []
    for x, y in dataloader:
        pred = model(x)
        pred_list.append(pred)
```

2. matplotlib *활용시 이미지가 누적되는 경우*

그래프를 그리는 대표적인 이미지 패키지 matplotlib 를 활용할때 *이미지를 선언한 변수를 `close`하지 않을 경우 메모리가 축적되기 때문에 아래 코드처럼 `close`메소드를 활용해서 작업이 완료된 변수를 제거해 주어야 함.

```python
plt.close(fig)
```

~~위와 같이 fig 를 close 해주지 않으면 같은 fig 를 생성해도 이전에 생성된 figure 가 사라지지 않아 메모리가 계속 축적됨~~